name: Application CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'stream-processing/**'
      - 'data-ingestion/**'
      - 'analytics/**'
      - 'requirements.txt'
      - 'pyproject.toml'
      - '.github/workflows/application.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'stream-processing/**'
      - 'data-ingestion/**'
      - 'analytics/**'
      - 'requirements.txt'
      - 'pyproject.toml'
      - '.github/workflows/application.yml'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov black flake8 mypy
        
    - name: Code formatting check
      run: black --check --diff .
      continue-on-error: true
      
    - name: Linting
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      continue-on-error: true
      
    - name: Type checking
      run: mypy . --ignore-missing-imports
      continue-on-error: true
      
    - name: Run tests
      run: |
        if [ -d "tests" ]; then
          pytest tests/ --cov=. --cov-report=xml --cov-report=html
        else
          echo "No tests directory found, skipping tests"
        fi
      continue-on-error: true
      
    - name: Upload coverage to Codecov
      if: always()
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install bandit
      run: pip install bandit[toml]
      
    - name: Run Bandit security scan
      run: bandit -r . -f json -o bandit-results.json
      continue-on-error: true
      
    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-results
        path: bandit-results.json

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Build Lambda packages
      run: |
        mkdir -p build/lambda-packages
        
        # Package stream processing functions
        if [ -d "stream-processing" ]; then
          cd stream-processing
          for func_dir in */; do
            if [ -f "${func_dir}requirements.txt" ]; then
              echo "Packaging ${func_dir%/}"
              mkdir -p "../build/lambda-packages/${func_dir%/}"
              pip install -r "${func_dir}requirements.txt" -t "../build/lambda-packages/${func_dir%/}/"
              cp -r ${func_dir}* "../build/lambda-packages/${func_dir%/}/"
              cd "../build/lambda-packages/${func_dir%/}"
              zip -r "../${func_dir%/}.zip" .
              cd ../../../stream-processing
            fi
          done
          cd ..
        fi
        
    - name: Upload Lambda packages to S3
      run: |
        if [ -d "build/lambda-packages" ]; then
          aws s3 sync build/lambda-packages/ s3://${{ secrets.LAMBDA_ARTIFACTS_BUCKET }}/lambda-packages/
        fi
      continue-on-error: true
      
    - name: Deploy Lambda functions
      run: |
        # This would typically involve updating Lambda function code
        # For now, we'll just echo the deployment step
        echo "Lambda deployment would happen here"
        echo "Functions would be updated with new code from S3"
      continue-on-error: true
      
    - name: Run integration tests
      run: |
        if [ -d "tests/integration" ]; then
          python -m pytest tests/integration/ -v
        else
          echo "No integration tests found, skipping"
        fi
      continue-on-error: true
