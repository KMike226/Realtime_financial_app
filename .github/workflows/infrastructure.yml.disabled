name: Infrastructure CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'infrastructure/**'
      - '.github/workflows/infrastructure.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'infrastructure/**'
      - '.github/workflows/infrastructure.yml'
  workflow_dispatch:

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'us-east-1'

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      working-directory: infrastructure/terraform
      
    - name: Terraform Init
      run: terraform init -backend=false
      working-directory: infrastructure/terraform/environments/dev
      
    - name: Terraform Validate
      run: terraform validate
      working-directory: infrastructure/terraform/environments/dev
      
    - name: Terraform Plan (Dry Run)
      run: terraform plan -input=false -no-color
      working-directory: infrastructure/terraform/environments/dev
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      continue-on-error: true

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Checkov scan
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: infrastructure/terraform
        framework: terraform
        output_format: sarif
        output_file_path: checkov-results.sarif
      continue-on-error: true
      
    - name: Upload Checkov results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-results.sarif

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Terraform Init
      run: terraform init
      working-directory: infrastructure/terraform/environments/dev
      
    - name: Terraform Plan
      id: plan
      run: terraform plan -input=false -no-color -out=tfplan
      working-directory: infrastructure/terraform/environments/dev
      
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve tfplan
      working-directory: infrastructure/terraform/environments/dev
      
    - name: Save Terraform outputs
      if: github.ref == 'refs/heads/main'
      run: terraform output -json > terraform-outputs.json
      working-directory: infrastructure/terraform/environments/dev
      
    - name: Upload Terraform outputs
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: terraform-outputs
        path: infrastructure/terraform/environments/dev/terraform-outputs.json

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Create production environment config
      run: |
        cp -r infrastructure/terraform/environments/dev infrastructure/terraform/environments/prod
        sed -i 's/dev/prod/g' infrastructure/terraform/environments/prod/terraform.tfvars
        
    - name: Terraform Init (Production)
      run: terraform init
      working-directory: infrastructure/terraform/environments/prod
      
    - name: Terraform Plan (Production)
      id: plan-prod
      run: terraform plan -input=false -no-color -out=tfplan-prod
      working-directory: infrastructure/terraform/environments/prod
      
    - name: Manual Approval for Production
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ secrets.GITHUB_TOKEN }}
        approvers: ${{ github.actor }}
        minimum-approvals: 1
        issue-title: "Production Deployment Approval"
        issue-body: "Please review the Terraform plan and approve the production deployment."
        
    - name: Terraform Apply (Production)
      run: terraform apply -auto-approve tfplan-prod
      working-directory: infrastructure/terraform/environments/prod
